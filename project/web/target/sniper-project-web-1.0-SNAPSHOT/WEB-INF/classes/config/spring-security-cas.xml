<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.2.xsd
			http://www.springframework.org/schema/context
    		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 排除无需权限认证地址  -->
	<security:http pattern="/favicon.ico" security="none" />
	<security:http pattern="/assets/**" security="none" />
	<security:http pattern="/services/**" security="none" /><!-- 第三方互通 -->
	<security:http pattern="/service/**" security="none" /><!-- 外部服务 -->
	
	<!--  初始化HTTPS请求证书路径 -->
	<bean class="com.miz.cas.client.SSLContextInitializer">
		<!-- 是否启用客户端认证 -->
		<constructor-arg name="clientAuth" value="true" />
	</bean>
	
	<security:http entry-point-ref="casAuthenticationEntryPoint" 
		access-decision-manager-ref="accessDecisionManager"
		auto-config="true">
		<!-- 配置ROLE_HOLDER角色用于进入认证过程，注释掉即可跳过权限认证 -->
		<security:intercept-url pattern="/**" access="ROLE_HOLDER" />
		<security:custom-filter position="CAS_FILTER"
			ref="casAuthenticationFilter"></security:custom-filter>
		<security:custom-filter ref="requestSingleLogoutFilter"
			before="LOGOUT_FILTER" />
		<security:custom-filter ref="singleLogoutFilter"
			before="CAS_FILTER" />
		<security:access-denied-handler/>
	</security:http>
	
	<bean id="authenticationUserDetailsService"
		class="com.miz.cas.client.DynamicRoleUserDetailsService">
		<property name="clientSystem"><value>${cas.client.system}</value></property>
		<property name="accountUrl"><value>${cas.account.url}</value></property>
	</bean>
	
	<!-- 访问决策器， 决定某个用户具体的角色，是否有足够的权限访问某个资源 -->
	<bean id="accessDecisionVoter" class="com.miz.cas.client.DynamicRoleAccessDecisionVoter">
		<property name="clientSystem"><value>${cas.client.system}</value></property>
		<property name="accountUrl"><value>${cas.account.url}</value></property>
	</bean>
	
	<!-- Define AccessDesisionManager as UnanimousBased -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<property name="decisionVoters">
			<list>
				<ref bean="accessDecisionVoter" />
			</list>
		</property>
	</bean>
	
	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		 be performed -->
	<bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="${cas.server.url}/logout" />
		<constructor-arg>
			<bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
	</bean>

	<!-- Required for the casProcessingFilter, so define it explicitly set and 
		 specify an Id Even though the authenticationManager is created by default 
		 when namespace based config is used. -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="casAuthenticationProvider"></security:authentication-provider>
	</security:authentication-manager>
	<!-- This section is used to configure CAS. The service is the actual redirect 
		 that will be triggered after the CAS login sequence. -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service"
			value="${cas.client.url}/j_spring_cas_security_check"></property>
		<property name="sendRenew" value="false"></property>
	</bean>
	<!-- The CAS filter handles the redirect from the CAS server and starts 
		 the ticket validation. -->
	<bean id="casAuthenticationFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager"></property>
	</bean>
	
	<!-- The entryPoint intercepts all the CAS authentication requests. It redirects 
		 to the CAS loginUrl for the CAS login page. -->
	<bean id="casAuthenticationEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.server.url}/login"></property>
		<property name="serviceProperties" ref="serviceProperties"></property>
	</bean>
	
	<!-- Handles the CAS ticket processing. -->
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="authenticationUserDetailsService" ref="authenticationUserDetailsService" />
		<property name="serviceProperties" ref="serviceProperties"></property>
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${cas.server.url}" />
			</bean>
		</property>
		<property name="key" value="cas"></property>
	</bean>
</beans>